/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –ø—Ä–æ–µ–∫—Ç–æ–≤
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-projects-api.js
 */

import { createProjectsApi } from './src/lib/api/projects.js';

// –ú–æ–∫ fetch —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockFetch = async (url, options) => {
	console.log('Mock fetch called:', url, options?.method || 'GET');
	
	// –°–∏–º—É–ª—è—Ü–∏—è GraphQL –æ—Ç–≤–µ—Ç–∞
	return {
		ok: true,
		json: async () => ({
			data: {
				projects: {
					data: [
						{
							id: 1,
							value: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç 1',
							city: '–ú–æ—Å–∫–≤–∞',
							description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
							is_active: true,
							contract_amount: 100000,
							agent: {
								id: 1,
								name: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç',
								email: 'agent@test.com'
							},
							created_at: '2024-01-01T00:00:00Z'
						},
						{
							id: 2,
							value: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç 2',
							city: '–°–ü–±',
							description: '–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
							is_active: false,
							contract_amount: 200000,
							agent: {
								id: 2,
								name: '–í—Ç–æ—Ä–æ–π –∞–≥–µ–Ω—Ç',
								email: 'agent2@test.com'
							},
							created_at: '2024-01-02T00:00:00Z'
						}
					],
					paginatorInfo: {
						currentPage: 1,
						lastPage: 1,
						total: 2,
						perPage: 100,
						hasMorePages: false
					}
				}
			}
		})
	};
};

async function testProjectsApi() {
	console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ–µ–∫—Ç–æ–≤...\n');
	
	try {
		// –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å –º–æ–∫ fetch
		const projectsApi = createProjectsApi(mockFetch);
		
		// –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
		console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...');
		const result = await projectsApi.getAll({ first: 100, page: 1 });
		console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', result.data.length);
		console.log('üìä –ü–∞–≥–∏–Ω–∞—Ü–∏—è:', result.paginatorInfo);
		
		// –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
		const stats = await projectsApi.getStats();
		console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
		
		// –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
		console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
		const searchResult = await projectsApi.search('–ú–æ—Å–∫–≤–∞');
		console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', searchResult.data.length);
		
		console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
		
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
		console.error(error.stack);
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testProjectsApi();